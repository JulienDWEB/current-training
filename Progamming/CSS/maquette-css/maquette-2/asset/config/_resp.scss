$spacing-scale: (
  p-xxs: 0.5rem,
  p-xs: 1rem,
  p-s: 0.75rem,
  p-ssm: 1rem,
  p-sm: 1.25rem,
  p-md: 1.5rem,
  p-ml: 1.75rem,
  p-lg: 2rem,
  p-xl: 3rem,
  p-xxl: 4rem,
);

$breakpoints: (
  xs: 480px,
  sm: 600px,
  md: 768px,
  lg: 1024px,
  xl: 1280px,
);

// Map de correspondance entre breakpoint et clé de padding
$responsive-padding: (
  xs: p-xs,
  sm: p-sm,
  md: p-md,
  lg: p-lg,
  xl: p-xl,
);
// PADDING RESPONSIVE
@mixin responsive-padding-from-map {
  @each $break, $padding-key in $responsive-padding {
    $bp: map-get($breakpoints, $break);
    $val: map-get($spacing-scale, $padding-key);

    @if $bp and $val {
      @media (min-width: $bp) {
        padding: $val;
      }
    } @else {
      @warn "❌ Erreur : `#{$break}` ou `#{$padding-key}` est invalide.";
    }
  }
}
@mixin responsive-padding-x-from-map {
  @each $break, $padding-key in $responsive-padding {
    $bp: map-get($breakpoints, $break);
    $val: map-get($spacing-scale, $padding-key);

    @if $bp and $val {
      @media (min-width: $bp) {
        padding-left: $val;
        padding-right: $val;
      }
    } @else {
      @warn "❌ Erreur : `#{$break}` ou `#{$padding-key}` est invalide.";
    }
  }
}
@mixin responsive-padding-y-from-map {
  @each $break, $padding-key in $responsive-padding {
    $bp: map-get($breakpoints, $break);
    $val: map-get($spacing-scale, $padding-key);

    @if $bp and $val {
      @media (min-width: $bp) {
        padding-top: $val;
        padding-bottom: $val;
      }
    } @else {
      @warn "❌ Erreur : `#{$break}` ou `#{$padding-key}` est invalide.";
    }
  }
}
@mixin responsive-margin-from-map {
  @each $break, $padding-key in $responsive-padding {
    $bp: map-get($breakpoints, $break);
    $val: map-get($spacing-scale, $padding-key);

    @if $bp and $val {
      @media (min-width: $bp) {
        margin: $val;
      }
    } @else {
      @warn "❌ Erreur : `#{$break}` ou `#{$padding-key}` est invalide.";
    }
  }
}
@mixin responsive-margin-x-from-map {
  @each $break, $padding-key in $responsive-padding {
    $bp: map-get($breakpoints, $break);
    $val: map-get($spacing-scale, $padding-key);

    @if $bp and $val {
      @media (min-width: $bp) {
        margin-left: $val;
        margin-right: $val;
      }
    } @else {
      @warn "❌ Erreur : `#{$break}` ou `#{$padding-key}` est invalide.";
    }
  }
}
@mixin responsive-margin-y-from-map {
  @each $break, $padding-key in $responsive-padding {
    $bp: map-get($breakpoints, $break);
    $val: map-get($spacing-scale, $padding-key);

    @if $bp and $val {
      @media (min-width: $bp) {
        margin-top: $val;
        margin-bottom: $val;
      }
    } @else {
      @warn "❌ Erreur : `#{$break}` ou `#{$padding-key}` est invalide.";
    }
  }
}
@mixin responsive-gap-from-map {
  @each $break, $padding-key in $responsive-padding {
    $bp: map-get($breakpoints, $break);
    $val: map-get($spacing-scale, $padding-key);

    @if $bp and $val {
      @media (min-width: $bp) {
        gap: $val;
      }
    } @else {
      @warn "❌ Erreur : `#{$break}` ou `#{$padding-key}` est invalide.";
    }
  }
}
// FONT SIZE
$font-size-scale: (
  fs-xs: 0.5rem,
  fs-sm: 0.75rem,
  fs-md: 0.9rem,
  fs-lg: 1.5rem,
  fs-xl: 1.1rem,
);

$responsive-font-size: (
  xs: fs-sm,
  sm: fs-md,
  md: fs-lg,
  lg: fs-xl,
  xl: fs-xl,
);
@mixin responsive-font-size-from-map {
  @each $break, $size-key in $responsive-font-size {
    $bp: map-get($breakpoints, $break);
    $val: map-get($font-size-scale, $size-key);

    @if $bp and $val {
      @media (min-width: $bp) {
        font-size: $val;
      }
    } @else {
      @warn "❌ Erreur : `#{$break}` ou `#{$size-key}` est invalide.";
    }
  }
}

// Mixin responsive pour la taille de carte
@mixin card-size1($width, $height, $responsive-sizes: ()) {
  width: $width;
  height: $height;

  // Appliquer les tailles pour chaque breakpoint si fourni
  @each $breakpoint, $size in $responsive-sizes {
    @if map-has-key($breakpoints, $breakpoint) {
      $media-width: map-get($breakpoints, $breakpoint);
      @media (min-width: $media-width) {
        width: nth($size, 1);
        height: nth($size, 2);
      }
    }
  }
}

@mixin resp-grid {
  display: grid;
  justify-content: center;
  @media (max-width: 750px) {
    grid-template-columns: 1fr;
  }
}
@mixin resp-flex {
  @media (max-width: 750px) {
    display: flex;
    flex-direction: column;
    align-items: center;
    grid-template-columns: none;
    grid-template-rows: none;
    gap: 0;
  }
}
