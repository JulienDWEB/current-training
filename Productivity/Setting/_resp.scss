@use 'sass:math'; // API MATHEMATIQUE

$base-font-size: 16px !default;
$design-height: 1080px !default;

// 1. Déclarations existantes Taille d'écran, responsive
$breakpoints: (
  xs: 480px,
  sm: 600px,
  md: 768px,
  lg: 1024px,
  xl: 1280px,
);

$responsive-values: (
  padding: (
    xs: 0.5rem,
    sm: 1.25rem,
    md: 1.5rem,
    lg: 2rem,
    xl: 3rem,
  ),
  margin: (
    xs: 0.25rem,
    sm: 0.75rem,
    md: 1rem,
    lg: 1.5rem,
    xl: 2rem,
  ),
  gap: (
    xs: 0.5rem,
    sm: 1rem,
    md: 1.25rem,
    lg: 1.75rem,
    xl: 2.5rem,
  ),
);

// 2. Mixin : prend une liste de propriétés et le nom de la map
//    $props peut être un seul nom ou une liste (padding, margin, gap)
@mixin responsive($props, $map-key) {
  $values-map: map-get($responsive-values, $map-key);

  // Si la clé est invalide, on avertit et on ne fait rien d’autre
  @if not $values-map {
    @warn "❌ Propriété `#{$map-key}` non trouvée dans $responsive-values.";
  }
  // Sinon, on exécute le mixin normalement
  @else {
    @each $break, $value in $values-map {
      $bp: map-get($breakpoints, $break);

      @if $bp {
        @media (min-width: $bp) {
          $props-list: if(type-of($props) == 'list', $props, ($props));

          @each $prop in $props-list {
            #{$prop}: #{$value};
          }
        }
      } @else {
        @warn "❌ Breakpoint `#{$break}` inconnu.";
      }
    }
  }
}

// Conversion Px vers REM, EM, VH

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function rem($size, $base-font-size: $base-font-size) {
  // math.div remplace le slash pour la division
  $ratio: math.div($size, strip-unit($base-font-size));
  @return $ratio * 1rem;
}

@function em($size, $base-font-size: $base-font-size) {
  $ratio: math.div($size, strip-unit($base-font-size));
  @return $ratio * 1em;
}

@function vh($size, $viewport-height: $design-height) {
  $ref: strip-unit($viewport-height);
  $ratio: math.div($size, $ref);
  @return $ratio * 100vh;
}

// Grid / Flex //

@mixin grid($columns: 12, $gap: 1rem, $rows: 1) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  grid-template-rows: repeat($rows, 1fr);
  gap: $gap;
}

@mixin center-flex($direction: row) {
  display: flex;
  flex-direction: $direction;
  justify-content: center;
  align-items: center;
}


$card-bg-colors: (
  #b57cdd, #8257a2, #563b69, #c486f0, #9d6cc0, #3e2a4c, #6d4b86, #e1bdf5, #ae18ff,
  #403350, #260f3f, #923afa
);

@for $i from 1 through 20 {
  .item:nth-child(#{$i}) {
    background-color: nth($card-bg-colors, (($i - 1) % length($card-bg-colors)) + 1);
  }
}

// Carte SIZE ! 

@mixin card-size(
  $width: 100px,
  $height: 100px,
  $max-width: 100%,
  $max-height: 100%
) {
  width: $width;
  height: $height;
  max-height: $max-height;

  @include respond(md) {
    width: min($width, 90%);
    height: auto;
    min-height: $height;
  }

  @include respond(sm) {
    width: min($width, 80%);
  } }